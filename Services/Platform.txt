import os
import json
import shutil
from flask import Flask, request, jsonify
from cryptography.fernet import Fernet

app = Flask(__name__)

# Directory where secrets will be stored
SECRET_DIRECTORY = "./secrets"

# Generate a random key to use as the encryption key
# Make sure to store this key securely in production applications
SECRET_KEY = Fernet.generate_key()
fernet_cipher = Fernet(SECRET_KEY)

# Load process whitelist from JSON config file
def load_whitelist():
    with open("whitelist.json") as f:
        return json.load(f)

# Load bucket configuration from JSON config file
def load_bucket_config():
    with open("buckets.json") as f:
        return json.load(f)

PROCESS_WHITELIST = load_whitelist()
BUCKET_CONFIG = load_bucket_config()

# Helper functions for encryption and salting
def encrypt_data(data):
    return fernet_cipher.encrypt(data.encode())

def decrypt_data(encrypted_data):
    return fernet_cipher.decrypt(encrypted_data).decode()

# CRUD functions for secrets and files in dedicated buckets
def create_secret(bucket, key, value):
    bucket_path = os.path.join(SECRET_DIRECTORY, bucket)
    os.makedirs(bucket_path, exist_ok=True)

    file_path = os.path.join(bucket_path, f"{key}.json")
    salt = os.urandom(16)  # Generate a random salt for each secret
    encrypted_value = encrypt_data(value)
    secret_data = {"key": key, "value": encrypted_value, "salt": salt.hex()}

    with open(file_path, "w") as file:
        json.dump(secret_data, file)

def read_secret(bucket, key):
    bucket_path = os.path.join(SECRET_DIRECTORY, bucket)
    file_path = os.path.join(bucket_path, f"{key}.json")

    try:
        with open(file_path, "r") as file:
            secret_data = json.load(file)
            encrypted_value = bytes.fromhex(secret_data["value"])
            return decrypt_data(encrypted_value)
    except FileNotFoundError:
        return None

def update_secret(bucket, key, value):
    bucket_path = os.path.join(SECRET_DIRECTORY, bucket)
    file_path = os.path.join(bucket_path, f"{key}.json")
    salt = os.urandom(16)  # Generate a new random salt for each update
    encrypted_value = encrypt_data(value)
    secret_data = {"key": key, "value": encrypted_value, "salt": salt.hex()}

    with open(file_path, "w") as file:
        json.dump(secret_data, file)

def delete_secret(bucket, key):
    bucket_path = os.path.join(SECRET_DIRECTORY, bucket)
    file_path = os.path.join(bucket_path, f"{key}.json")

    try:
        os.remove(file_path)
    except FileNotFoundError:
        pass  # If the file doesn't exist, there's nothing to delete

# Flask API endpoints
@app.route("/create", methods=["POST"])
def create_secret_endpoint():
    client_host = request.remote_addr
    client_process = request.headers.get("User-Agent")

    if client_host not in PROCESS_WHITELIST or client_process not in PROCESS_WHITELIST[client_host]:
        return jsonify({"error": "Unauthorized"}), 401

    data = request.get_json()
    bucket = data.get("bucket")
    key = data.get("key")
    value = data.get("value")

    if bucket and key and value:
        if bucket not in BUCKET_CONFIG:
            return jsonify({"error": "Invalid bucket"}), 400

        create_secret(bucket, key, value)
        return jsonify({"message": "Secret created successfully"}), 201
    else:
        return jsonify({"error": "Missing bucket, key, or value"}), 400

@app.route("/read", methods=["GET"])
def read_secret_endpoint():
    client_host = request.remote_addr
    client_process = request.headers.get("User-Agent")

    if client_host not in PROCESS_WHITELIST or client_process not in PROCESS_WHITELIST[client_host]:
        return jsonify({"error": "Unauthorized"}), 401

    bucket = request.args.get("bucket")
    key = request.args.get("key")

    if bucket and key:
        if bucket not in BUCKET_CONFIG:
            return jsonify({"error": "Invalid bucket"}), 400

        value = read_secret(bucket, key)
        if value is not None:
            return jsonify({"value": value}), 200
        else:
            return jsonify({"error": "Secret not found"}), 404
    else:
        return jsonify({"error": "Missing bucket or key parameter"}), 400

@app.route("/update", methods=["PUT"])
def update_secret_endpoint():
    client_host = request.remote_addr
    client_process = request.headers.get("User-Agent")

    if client_host not in PROCESS_WHITELIST or client_process not in PROCESS_WHITELIST[client_host]:
        return jsonify({"error": "Unauthorized"}), 401

    data = request.get_json()
    bucket = data.get("bucket")
    key = data.get("key")
    value = data.get("value")

    if bucket and key and value:
        if bucket not in BUCKET_CONFIG:
            return jsonify({"error": "Invalid bucket"}), 400

        update_secret(bucket, key, value)
        return jsonify({"message": "Secret updated successfully"}), 200
    else:
        return jsonify({"error": "Missing bucket, key, or value"}), 400

@app.route("/delete", methods=["DELETE"])
def delete_secret_endpoint():
    client_host = request.remote_addr
    client_process = request.headers.get("User-Agent")

    if client_host not in PROCESS_WHITELIST or client_process not in PROCESS_WHITELIST[client_host]:
        return jsonify({"error": "Unauthorized"}), 401

    bucket = request.args.get("bucket")
    key = request.args.get("key")

    if bucket and key:
        if bucket not in BUCKET_CONFIG:
            return jsonify({"error": "Invalid bucket"}), 400

        delete_secret(bucket, key)
        return jsonify({"message": "Secret deleted successfully"}), 200
    else:
        return jsonify({"error": "Missing bucket or key parameter"}), 400

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
