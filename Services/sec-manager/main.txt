{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "properties": {
    "bucket_name": {
      "type": "string"
    },
    "allowed_ips": {
      "oneOf": [
        {
          "type": "array",
          "items": {
            "type": "string",
            "format": "hostname"
          }
        },
        {
          "type": "array",
          "items": {
            "type": "string",
            "format": "ipv4"
          }
        },
        {
          "type": "string",
          "enum": ["ANY"]
        }
      ]
    },
    "owner_email": {
      "type": "string",
      "format": "email"
    }
  },
  "required": ["bucket_name", "allowed_ips", "owner_email"]
}

def get_bucket_config(bucket_name, app_name):
    """
    Load the bucket-specific configuration by searching through the 'config' directory and its subdirectories.

    Args:
        bucket_name (str): The name of the bucket.
        app_name (str): Application Name for the Bucket.

    Returns:
        dict: Configuration data for the bucket or None if not found.
    """
    config_dir = os.path.join('config', server_env, app_name)
    for root, dirs, files in os.walk(config_dir):
        if f"{bucket_name}.json" in files:
            config_path = os.path.join(root, f"{bucket_name}.json")
            try:
                with open(config_path, 'r') as config_file:
                    config = json.load(config_file)
                
                # Validate the config using the schema
                with open('bucket_config_schema.json', 'r') as schema_file:
                    schema = json.load(schema_file)
                validate(instance=config, schema=schema)

                # Ensure the file name matches the bucket_name
                if config["bucket_name"] != bucket_name:
                    logging.error(f"Bucket name mismatch in {config_path}")
                    return None

                return config
            except ValidationError as ve:
                logging.error(f"JSON Schema validation failed for {config_path}: {str(ve)}")
                return None
            except Exception as e:
                logging.error(f"Error reading or parsing config file {config_path}: {str(e)}")
                return None

    return None
