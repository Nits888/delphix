import os
import json
import logging
import re
from jsonschema import validate, ValidationError, exceptions

# Custom validator for hostname
def is_valid_hostname(hostname):
    if len(hostname) > 255:
        return False
    if hostname[-1] == ".":
        hostname = hostname[:-1]  # strip trailing dot
    allowed = re.compile("(?!-)[A-Z\d-]{1,63}(?<!-)$", re.IGNORECASE)
    return all(allowed.match(x) for x in hostname.split("."))

# Extend jsonschema with custom hostname validator
def extended_validate(instance, schema):
    validate(instance=instance, schema=schema)
    if "allowed_ips" in instance:
        for ip_or_hostname in instance["allowed_ips"]:
            if ip_or_hostname == "ANY":
                continue
            if not (re.match(r"^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$", ip_or_hostname) or is_valid_hostname(ip_or_hostname)):
                raise exceptions.ValidationError(f"'{ip_or_hostname}' is not a valid IP, hostname, or the value 'ANY'")

def get_bucket_config(bucket_name, app_name):
    """
    Load the bucket-specific configuration by searching through the 'config' directory and its subdirectories.

    Args:
        bucket_name (str): The name of the bucket.
        app_name (str): Application Name for the Bucket.

    Returns:
        dict: Configuration data for the bucket or None if not found.
    """
    config_dir = os.path.join('config', server_env, app_name)
    for root, dirs, files in os.walk(config_dir):
        if f"{bucket_name}.json" in files:
            config_path = os.path.join(root, f"{bucket_name}.json")
            try:
                with open(config_path, 'r') as config_file:
                    config = json.load(config_file)
                
                # Load and validate the config using the schema
                with open('bucket_config_schema.json', 'r') as schema_file:
                    schema = json.load(schema_file)
                extended_validate(instance=config, schema=schema)

                # Ensure the file name matches the bucket_name
                if config["bucket_name"] != bucket_name:
                    logging.error(f"Bucket name mismatch in {config_path}")
                    return None

                return config
            except ValidationError as ve:
                logging.error(f"JSON Schema validation failed for {config_path}: {str(ve)}")
                return None
            except Exception as e:
                logging.error(f"Error reading or parsing config file {config_path}: {str(e)}")
                return None

    return None
