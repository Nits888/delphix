import socket

def ip_whitelist_required(f):
    """Decorator to check if the incoming IP is whitelisted.

     Args:
         f (function): The function to be decorated.

     Returns:
         function: The decorated function.
     """

    @wraps(f)
    def decorated_function(*args, **kwargs):
        # Retrieve the client IP from the X-Real-IP header
        incoming_ip = request.headers.get('X-Real-IP', request.remote_addr)
        bucket_config = get_bucket_config(g.bucket_name, g.app_name)
        allowed_entries = bucket_config.get("allowed_ips", [])

        # Resolve allowed hostnames to IPs
        allowed_ips = []
        for entry in allowed_entries:
            if is_valid_ip(entry):
                allowed_ips.append(entry)
            else:
                try:
                    resolved_ips = socket.gethostbyname_ex(entry)[2]
                    allowed_ips.extend(resolved_ips)
                except socket.gaierror:
                    logging.error(f"Failed to resolve IP for hostname: {entry}")

        # If "ANY" is in the allowed_ips list or the incoming IP is in the allowed_ips list, allow the request
        if "ANY" in allowed_ips:
            logging.info(f"IP address {incoming_ip} allowed due to 'ANY' in whitelist for bucket {g.bucket_name}.")
            return f(*args, **kwargs)
        elif incoming_ip in allowed_ips:
            return f(*args, **kwargs)

        logging.warning(f"Unauthorized IP address attempt: {incoming_ip} for bucket {g.bucket_name}.")
        return {'error': 'Unauthorized IP address'}, 403  # Return the dictionary directly

    return decorated_function

def is_valid_ip(address):
    """Check if the address is a valid IP."""
    try:
        socket.inet_aton(address)
        return True
    except socket.error:
        return False
